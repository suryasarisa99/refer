[
  {
    "name": "seed",
    "syntax": "random.seed(a=None, version=2)",
    "description": "Initialize the random number generator.",
    "examples": [
      {
        "example": "import random\nrandom.seed(42)",
        "output": ""
      },
      {
        "example": "import random\nrandom.seed(1000, version=1)",
        "output": ""
      }
    ]
  },
  {
    "name": "getstate",
    "syntax": "random.getstate()",
    "description": "Return an object capturing the current internal state of the generator.",
    "examples": [
      {
        "example": "import random\nstate = random.getstate()\nprint(state)",
        "output": "<random.Random object at 0x...>"
      },
      {
        "example": "import random\nstate = random.getstate()\nprint(state)",
        "output": "<random.Random object at 0x...>"
      }
    ]
  },
  {
    "name": "setstate",
    "syntax": "random.setstate(state)",
    "description": "Restore the internal state of the generator.",
    "examples": [
      {
        "example": "import random\nstate = random.getstate()\nrandom.setstate(state)",
        "output": ""
      },
      {
        "example": "import random\nstate = random.getstate()\nrandom.setstate(state)",
        "output": ""
      }
    ]
  },
  {
    "name": "getrandbits",
    "syntax": "random.getrandbits(k)",
    "description": "Return an integer with k random bits.",
    "examples": [
      {
        "example": "import random\nbits = random.getrandbits(4)\nprint(bits)",
        "output": "10"
      },
      {
        "example": "import random\nbits = random.getrandbits(8)\nprint(bits)",
        "output": "201"
      }
    ]
  },
  {
    "name": "randrange",
    "syntax": "random.randrange(start, stop=None, step=1, _int=<class 'int'>)",
    "description": "Return a randomly selected element from range(start, stop, step).",
    "examples": [
      {
        "example": "import random\nnum = random.randrange(0, 10, 2)\nprint(num)",
        "output": "4"
      },
      {
        "example": "import random\nnum = random.randrange(1, 7)\nprint(num)",
        "output": "5"
      }
    ]
  },
  {
    "name": "randint",
    "syntax": "random.randint(a, b)",
    "description": "Return a random integer N such that a <= N <= b.",
    "examples": [
      {
        "example": "import random\nnum = random.randint(1, 100)\nprint(num)",
        "output": "42"
      },
      {
        "example": "import random\nnum = random.randint(-5, 5)\nprint(num)",
        "output": "-3"
      }
    ]
  },
  {
    "name": "choice",
    "syntax": "random.choice(seq)",
    "description": "Return a random element from the non-empty sequence seq.",
    "examples": [
      {
        "example": "import random\nitems = [1, 2, 3, 4, 5]\nchoice = random.choice(items)\nprint(choice)",
        "output": "3"
      },
      {
        "example": "import random\nitems = ['apple', 'banana', 'orange']\nchoice = random.choice(items)\nprint(choice)",
        "output": "'banana'"
      }
    ]
  },
  {
    "name": "choices",
    "syntax": "random.choices(population, weights=None, *, cum_weights=None, k=1)",
    "description": "Return a k sized list of elements chosen from the population with replacement.",
    "examples": [
      {
        "example": "import random\nitems = [1, 2, 3, 4, 5]\nchoices = random.choices(items, k=3)\nprint(choices)",
        "output": "[1, 4, 2]"
      },
      {
        "example": "import random\nitems = ['apple', 'banana', 'orange']\nchoices = random.choices(items, k=2)\nprint(choices)",
        "output": "['banana', 'banana']"
      }
    ]
  },
  {
    "name": "shuffle",
    "syntax": "random.shuffle(x[, random])",
    "description": "Shuffle the sequence x in place.",
    "examples": [
      {
        "example": "import random\nitems = [1, 2, 3, 4, 5]\nrandom.shuffle(items)\nprint(items)",
        "output": "[4, 2, 3, 1, 5]"
      },
      {
        "example": "import random\nitems = ['apple', 'banana', 'orange']\nrandom.shuffle(items)\nprint(items)",
        "output": "['banana', 'orange', 'apple']"
      }
    ]
  },
  {
    "name": "sample",
    "syntax": "random.sample(population, k, *, counts=None)",
    "description": "Return a k length list of unique elements chosen from the population sequence or set. Used for random sampling without replacement.",
    "examples": [
      {
        "example": "import random\nitems = [1, 2, 3, 4, 5]\nsample = random.sample(items, k=3)\nprint(sample)",
        "output": "[2, 4, 1]"
      },
      {
        "example": "import random\nitems = ['apple', 'banana', 'orange']\nsample = random.sample(items, k=2)\nprint(sample)",
        "output": "['orange', 'banana']"
      }
    ]
  },
  {
    "name": "random",
    "syntax": "random.random()",
    "description": "Return the next random floating point number in the range [0.0, 1.0).",
    "examples": [
      {
        "example": "import random\nnum = random.random()\nprint(num)",
        "output": "0.537893232225"
      },
      {
        "example": "import random\nnum = random.random()\nprint(num)",
        "output": "0.987654321"
      }
    ]
  },
  {
    "name": "uniform",
    "syntax": "random.uniform(a, b)",
    "description": "Return a random floating point number N such that a <= N <= b for a <= b and b <= N <= a for b < a.",
    "examples": [
      {
        "example": "import random\nnum = random.uniform(1, 10)\nprint(num)",
        "output": "5.213"
      },
      {
        "example": "import random\nnum = random.uniform(10, 1)\nprint(num)",
        "output": "7.872"
      }
    ]
  },
  {
    "name": "triangular",
    "syntax": "random.triangular(low, high, mode)",
    "description": "Return a random floating point number N such that low <= N <= high and with the specified mode between those bounds.",
    "examples": [
      {
        "example": "import random\nnum = random.triangular(0, 10, 5)\nprint(num)",
        "output": "3.421"
      },
      {
        "example": "import random\nnum = random.triangular(10, 0, 5)\nprint(num)",
        "output": "8.932"
      }
    ]
  },
  {
    "name": "betavariate",
    "syntax": "random.betavariate(alpha, beta)",
    "description": "Beta distribution. Conditions on the parameters are alpha > 0 and beta > 0. Returned values range between 0 and 1.",
    "examples": [
      {
        "example": "import random\nnum = random.betavariate(2, 5)\nprint(num)",
        "output": "0.623"
      },
      {
        "example": "import random\nnum = random.betavariate(0.5, 0.5)\nprint(num)",
        "output": "0.872"
      }
    ]
  },
  {
    "name": "expovariate",
    "syntax": "random.expovariate(lambd)",
    "description": "Exponential distribution. lambd is 1.0 divided by the desired mean. It should be nonzero. Returned values range from 0 to positive infinity if lambd is positive, and from negative infinity to 0 if lambd is negative.",
    "examples": [
      {
        "example": "import random\nnum = random.expovariate(0.5)\nprint(num)",
        "output": "2.145"
      },
      {
        "example": "import random\nnum = random.expovariate(1)\nprint(num)",
        "output": "0.432"
      }
    ]
  },
  {
    "name": "gammavariate",
    "syntax": "random.gammavariate(alpha, beta)",
    "description": "Gamma distribution. Conditions on the parameters are alpha > 0 and beta > 0.",
    "examples": [
      {
        "example": "import random\nnum = random.gammavariate(2, 3)\nprint(num)",
        "output": "1.234"
      },
      {
        "example": "import random\nnum = random.gammavariate(0.5, 0.25)\nprint(num)",
        "output": "0.512"
      }
    ]
  },
  {
    "name": "gauss",
    "syntax": "random.gauss(mu, sigma)",
    "description": "Gaussian distribution. mu is the mean, and sigma is the standard deviation.",
    "examples": [
      {
        "example": "import random\nnum = random.gauss(0, 1)\nprint(num)",
        "output": "0.234"
      },
      {
        "example": "import random\nnum = random.gauss(10, 2)\nprint(num)",
        "output": "12.342"
      }
    ]
  },
  {
    "name": "lognormvariate",
    "syntax": "random.lognormvariate(mu, sigma)",
    "description": "Log-normal distribution. If you take the natural logarithm of this distribution, youâ€™ll get a normal distribution with mean mu and standard deviation sigma.",
    "examples": [
      {
        "example": "import random\nnum = random.lognormvariate(0, 1)\nprint(num)",
        "output": "1.234"
      },
      {
        "example": "import random\nnum = random.lognormvariate(2, 0.5)\nprint(num)",
        "output": "5.432"
      }
    ]
  },
  {
    "name": "normalvariate",
    "syntax": "random.normalvariate(mu, sigma)",
    "description": "Normal distribution. mu is the mean, and sigma is the standard deviation.",
    "examples": [
      {
        "example": "import random\nnum = random.normalvariate(0, 1)\nprint(num)",
        "output": "0.234"
      },
      {
        "example": "import random\nnum = random.normalvariate(10, 2)\nprint(num)",
        "output": "11.987"
      }
    ]
  },
  {
    "name": "vonmisesvariate",
    "syntax": "random.vonmisesvariate(mu, kappa)",
    "description": "Mu is the mean angle, expressed in radians between 0 and 2pi, and kappa is the concentration parameter which must be greater than or equal to zero.",
    "examples": [
      {
        "example": "import random\nnum = random.vonmisesvariate(0, 1)\nprint(num)",
        "output": "1.234"
      },
      {
        "example": "import random\nnum = random.vonmisesvariate(3.14159, 0.5)\nprint(num)",
        "output": "4.987"
      }
    ]
  },
  {
    "name": "paretovariate",
    "syntax": "random.paretovariate(alpha)",
    "description": "Pareto distribution. alpha is the shape parameter.",
    "examples": [
      {
        "example": "import random\nnum = random.paretovariate(1)\nprint(num)",
        "output": "0.876"
      },
      {
        "example": "import random\nnum = random.paretovariate(2)\nprint(num)",
        "output": "0.432"
      }
    ]
  },
  {
    "name": "weibullvariate",
    "syntax": "random.weibullvariate(alpha, beta)",
    "description": "Weibull distribution.",
    "examples": [
      {
        "example": "import random\nnum = random.weibullvariate(1, 2)\nprint(num)",
        "output": "1.234"
      },
      {
        "example": "import random\nnum = random.weibullvariate(0.5, 1)\nprint(num)",
        "output": "0.987"
      }
    ]
  }
]
