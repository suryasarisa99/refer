[
  {
    "name": "array",
    "syntax": "numpy.array(object, dtype=None)",
    "description": "Creates a new array from an object.",
    "attributes": {
      "object": ["List", "Tuple", "Iterable"],
      "dtype": ["Optional: Data Type"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([1, 2, 3])",
        "output": "arr = array([1, 2, 3])"
      },
      {
        "example": "arr = numpy.array((4, 5, 6), dtype=float)",
        "output": "arr = array([4., 5., 6.])"
      }
    ]
  },
  {
    "name": "arange",
    "syntax": "numpy.arange(start, stop, step, dtype=None)",
    "description": "Returns an array with evenly spaced values within a given interval.",
    "attributes": {
      "start": ["Start value of the interval"],
      "stop": ["End value of the interval"],
      "step": ["Optional: Step size between values"],
      "dtype": ["Optional: Data Type"]
    },
    "examples": [
      {
        "example": "arr = numpy.arange(1, 10, 2)",
        "output": "arr = array([1, 3, 5, 7, 9])"
      },
      {
        "example": "arr = numpy.arange(5, dtype=float)",
        "output": "arr = array([0., 1., 2., 3., 4.])"
      }
    ]
  },
  {
    "name": "reshape",
    "syntax": "numpy.reshape(array, newshape)",
    "description": "Gives a new shape to an array without changing its data.",
    "attributes": {
      "array": ["Input array"],
      "newshape": ["New shape as a tuple"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([1, 2, 3, 4, 5, 6])\nnew_arr = numpy.reshape(arr, (2, 3))",
        "output": "new_arr = array([[1, 2, 3],\n [4, 5, 6]])"
      },
      {
        "example": "arr = numpy.arange(6)\nnew_arr = numpy.reshape(arr, (3, 2))",
        "output": "new_arr = array([[0, 1],\n [2, 3],\n [4, 5]])"
      }
    ]
  },
  {
    "name": "ndarray.shape",
    "syntax": "array.shape",
    "description": "Returns the shape of the array.",
    "attributes": {
      "array": ["Input array"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([[1, 2, 3], [4, 5, 6]])\nshape = arr.shape",
        "output": "shape = (2, 3)"
      },
      {
        "example": "arr = numpy.array([1, 2, 3])\nshape = arr.shape",
        "output": "shape = (3,)"
      }
    ]
  },
  {
    "name": "ndarray.ndim",
    "syntax": "array.ndim",
    "description": "Returns the number of array dimensions.",
    "attributes": {
      "array": ["Input array"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([[1, 2, 3], [4, 5, 6]])\ndimensions = arr.ndim",
        "output": "dimensions = 2"
      },
      {
        "example": "arr = numpy.array([1, 2, 3])\ndimensions = arr.ndim",
        "output": "dimensions = 1"
      }
    ]
  },
  {
    "name": "ndarray.size",
    "syntax": "array.size",
    "description": "Returns the number of elements in the array.",
    "attributes": {
      "array": ["Input array"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([[1, 2, 3], [4, 5, 6]])\nsize = arr.size",
        "output": "size = 6"
      },
      {
        "example": "arr = numpy.array([1, 2, 3])\nsize = arr.size",
        "output": "size = 3"
      }
    ]
  },
  {
    "name": "ndarray.dtype",
    "syntax": "array.dtype",
    "description": "Returns the data type of the array elements.",
    "attributes": {
      "array": ["Input array"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([1, 2, 3])\ndtype = arr.dtype",
        "output": "dtype = dtype('int64')"
      },
      {
        "example": "arr = numpy.array([1.5, 2.5, 3.5])\ndtype = arr.dtype",
        "output": "dtype = dtype('float64')"
      }
    ]
  },
  {
    "name": "ndarray.astype",
    "syntax": "array.astype(dtype)",
    "description": "Returns a copy of the array, cast to a specified type.",
    "attributes": {
      "array": ["Input array"],
      "dtype": ["Data type to cast to"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([1, 2, 3])\nnew_arr = arr.astype(float)",
        "output": "new_arr = array([1., 2., 3.])"
      },
      {
        "example": "arr = numpy.array([1.5, 2.5, 3.5])\nnew_arr = arr.astype(int)",
        "output": "new_arr = array([1, 2, 3])"
      }
    ]
  },
  {
    "name": "ndarray.fill",
    "syntax": "array.fill(value)",
    "description": "Fills the array with a scalar value.",
    "attributes": {
      "array": ["Input array"],
      "value": ["Value to fill the array with"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([1, 2, 3])\narr.fill(0)",
        "output": "arr = array([0, 0, 0])"
      },
      {
        "example": "arr = numpy.empty((2, 2))\narr.fill(5)",
        "output": "arr = array([[5., 5.],\n [5., 5.]])"
      }
    ]
  },
  {
    "name": "ndarray.flatten",
    "syntax": "array.flatten()",
    "description": "Returns a copy of the array flattened to one dimension.",
    "attributes": {
      "array": ["Input array"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([[1, 2, 3], [4, 5, 6]])\nflattened_arr = arr.flatten()",
        "output": "flattened_arr = array([1, 2, 3, 4, 5, 6])"
      },
      {
        "example": "arr = numpy.array([[1, 2], [3, 4]])\nflattened_arr = arr.flatten()",
        "output": "flattened_arr = array([1, 2, 3, 4])"
      }
    ]
  },
  {
    "name": "ndarray.transpose",
    "syntax": "array.transpose(*axes)",
    "description": "Returns an array with axes transposed.",
    "attributes": {
      "array": ["Input array"],
      "axes": ["Optional: Permutation of the axes"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([[1, 2, 3], [4, 5, 6]])\ntransposed_arr = arr.transpose()",
        "output": "transposed_arr = array([[1, 4],\n [2, 5],\n [3, 6]])"
      },
      {
        "example": "arr = numpy.array([[1, 2], [3, 4]])\ntransposed_arr = arr.transpose()",
        "output": "transposed_arr = array([[1, 3],\n [2, 4]])"
      }
    ]
  },
  {
    "name": "ndarray.T",
    "syntax": "array.T",
    "description": "Returns the array, transposed.",
    "attributes": {
      "array": ["Input array"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([[1, 2, 3], [4, 5, 6]])\ntransposed_arr = arr.T",
        "output": "transposed_arr = array([[1, 4],\n [2, 5],\n [3, 6]])"
      },
      {
        "example": "arr = numpy.array([[1, 2], [3, 4]])\ntransposed_arr = arr.T",
        "output": "transposed_arr = array([[1, 3],\n [2, 4]])"
      }
    ]
  },
  {
    "name": "ndarray.sort",
    "syntax": "array.sort(axis=-1, kind=None, order=None)",
    "description": "Sorts the array in place along the specified axis.",
    "attributes": {
      "array": ["Input array"],
      "axis": ["Optional: Axis along which to sort the array"],
      "kind": ["Optional: Type of sorting algorithm"],
      "order": ["Optional: Field to use when sorting a structured array"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([3, 1, 2])\narr.sort()\narr",
        "output": "arr = array([1, 2, 3])"
      },
      {
        "example": "arr = numpy.array([[3, 2, 1], [6, 5, 4]])\narr.sort(axis=1)\narr",
        "output": "arr = array([[1, 2, 3],\n [4, 5, 6]])"
      }
    ]
  },
  {
    "name": "ndarray.argsort",
    "syntax": "array.argsort(axis=-1, kind=None, order=None)",
    "description": "Returns the indices that would sort the array along the specified axis.",
    "attributes": {
      "array": ["Input array"],
      "axis": ["Optional: Axis along which to sort the array"],
      "kind": ["Optional: Type of sorting algorithm"],
      "order": ["Optional: Field to use when sorting a structured array"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([3, 1, 2])\nsorted_indices = arr.argsort()\nsorted_indices",
        "output": "sorted_indices = array([1, 2, 0])"
      },
      {
        "example": "arr = numpy.array([[3, 2, 1], [6, 5, 4]])\nsorted_indices = arr.argsort(axis=1)\nsorted_indices",
        "output": "sorted_indices = array([[2, 1, 0],\n [2, 1, 0]])"
      }
    ]
  },
  {
    "name": "ndarray.argmax",
    "syntax": "array.argmax(axis=None, out=None)",
    "description": "Returns the indices of the maximum values along the specified axis.",
    "attributes": {
      "array": ["Input array"],
      "axis": ["Optional: Axis along which to find the maximum values"],
      "out": ["Optional: Output array"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([3, 1, 2])\nmax_index = arr.argmax()\nmax_index",
        "output": "max_index = 0"
      },
      {
        "example": "arr = numpy.array([[3, 2, 1], [6, 5, 4]])\nmax_indices = arr.argmax(axis=0)\nmax_indices",
        "output": "max_indices = array([1, 1, 1])"
      }
    ]
  },
  {
    "name": "ndarray.argmin",
    "syntax": "array.argmin(axis=None, out=None)",
    "description": "Returns the indices of the minimum values along the specified axis.",
    "attributes": {
      "array": ["Input array"],
      "axis": ["Optional: Axis along which to find the minimum values"],
      "out": ["Optional: Output array"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([3, 1, 2])\nmin_index = arr.argmin()\nmin_index",
        "output": "min_index = 1"
      },
      {
        "example": "arr = numpy.array([[3, 2, 1], [6, 5, 4]])\nmin_indices = arr.argmin(axis=0)\nmin_indices",
        "output": "min_indices = array([0, 0, 0])"
      }
    ]
  },
  {
    "name": "ndarray.max",
    "syntax": "array.max(axis=None, out=None, keepdims=False)",
    "description": "Returns the maximum value along the specified axis.",
    "attributes": {
      "array": ["Input array"],
      "axis": ["Optional: Axis along which to find the maximum value"],
      "out": ["Optional: Output array"],
      "keepdims": ["Optional: If True, the reduced dimensions are retained"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([3, 1, 2])\nmax_value = arr.max()\nmax_value",
        "output": "max_value = 3"
      },
      {
        "example": "arr = numpy.array([[3, 2, 1], [6, 5, 4]])\nmax_values = arr.max(axis=0)\nmax_values",
        "output": "max_values = array([6, 5, 4])"
      }
    ]
  },
  {
    "name": "ndarray.min",
    "syntax": "array.min(axis=None, out=None, keepdims=False)",
    "description": "Returns the minimum value along the specified axis.",
    "attributes": {
      "array": ["Input array"],
      "axis": ["Optional: Axis along which to find the minimum value"],
      "out": ["Optional: Output array"],
      "keepdims": ["Optional: If True, the reduced dimensions are retained"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([3, 1, 2])\nmin_value = arr.min()\nmin_value",
        "output": "min_value = 1"
      },
      {
        "example": "arr = numpy.array([[3, 2, 1], [6, 5, 4]])\nmin_values = arr.min(axis=0)\nmin_values",
        "output": "min_values = array([3, 2, 1])"
      }
    ]
  },
  {
    "name": "ndarray.mean",
    "syntax": "array.mean(axis=None, dtype=None, out=None, keepdims=False)",
    "description": "Returns the arithmetic mean along the specified axis.",
    "attributes": {
      "array": ["Input array"],
      "axis": ["Optional: Axis along which to compute the mean"],
      "dtype": ["Optional: Data type to use in computation"],
      "out": ["Optional: Output array"],
      "keepdims": ["Optional: If True, the reduced dimensions are retained"]
    },
    "examples": [
      {
        "example": "arr = numpy.array([3, 1, 2])\nmean_value = arr.mean()\nmean_value",
        "output": "mean_value = 2.0"
      },
      {
        "example": "arr = numpy.array([[3, 2, 1], [6, 5, 4]])\nmean_values = arr.mean(axis=0)\nmean_values",
        "output": "mean_values = array([4.5, 3.5, 2.5])"
      }
    ]
  }
]
