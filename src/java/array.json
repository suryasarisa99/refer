[
  {
    "name": "binarySearch",
    "syntax": "static int binarySearch(Object[] a, Object key)",
    "keypoints": "Searches for a key in the specified array using the binary search algorithm.",
    "description": "",
    "examples": [
      "const array = [1, 2, 3, 4, 5];\nconst index = binarySearch(array, 3);"
    ],
    "output": ["index = 2"]
  },
  {
    "name": "copyOf",
    "syntax": "static <T> T[] copyOf(T[] original, int newLength)",
    "keypoints": "Copies the specified array, truncating or padding with nulls (if necessary) to obtain the specified length.",
    "description": "",
    "examples": [
      "const originalArray = [1, 2, 3];\nconst copy = copyOf(originalArray, 5);"
    ],
    "output": ["copy = [1, 2, 3, null, null]"]
  },
  {
    "name": "copyOfRange",
    "syntax": "static <T> T[] copyOfRange(T[] original, int from, int to)",
    "keypoints": "Copies the specified range from the original array to a new array.",
    "description": "",
    "examples": [
      "const originalArray = [1, 2, 3, 4, 5];\nconst copy = copyOfRange(originalArray, 1, 4);"
    ],
    "output": ["copy = [2, 3, 4]"]
  },
  {
    "name": "deepEquals",
    "syntax": "static boolean deepEquals(Object[] a1, Object[] a2)",
    "keypoints": "Performs a deep comparison of two arrays to determine if they are equal.",
    "description": "",
    "examples": [
      "const array1 = [1, 2, 3];\nconst array2 = [1, 2, 3];\nconst equal = deepEquals(array1, array2);"
    ],
    "output": ["equal = true"]
  },
  {
    "name": "deepHashCode",
    "syntax": "static int deepHashCode(Object[] a)",
    "keypoints": "Computes a deep hash code for an array.",
    "description": "",
    "examples": [
      "const array = [1, 2, 3];\nconst hashCode = deepHashCode(array);"
    ],
    "output": ["hashCode = 30817"]
  },
  {
    "name": "deepToString",
    "syntax": "static String deepToString(Object[] a)",
    "keypoints": "Returns a string representation of the contents of an array, including nested arrays.",
    "description": "",
    "examples": [
      "const array = [1, 2, [3, 4]];\nconst str = deepToString(array);"
    ],
    "output": ["str = \"[1, 2, [3, 4]]\""]
  },
  {
    "name": "equals",
    "syntax": "static boolean equals(Object[] a, Object[] a2)",
    "keypoints": "Compares the specified arrays for equality.",
    "description": "",
    "examples": [
      "const array1 = [1, 2, 3];\nconst array2 = [1, 2, 3];\nconst equal = equals(array1, array2);"
    ],
    "output": ["equal = true"]
  },
  {
    "name": "fill",
    "syntax": "static void fill(int[] a, int val)",
    "keypoints": "Assigns the specified value to every element of the specified array.",
    "description": "",
    "examples": ["const array = new int[5];\nfill(array, 0);"],
    "output": ["array = [0, 0, 0, 0, 0]"]
  },
  {
    "name": "hashCode",
    "syntax": "static int hashCode(Object[] a)",
    "keypoints": "Computes the hash code for an array.",
    "description": "",
    "examples": ["const array = [1, 2, 3];\nconst hashCode = hashCode(array);"],
    "output": ["hashCode = 30817"]
  },
  {
    "name": "parallelPrefix",
    "syntax": "static void parallelPrefix(int[] array, IntBinaryOperator op)",
    "keypoints": "Performs parallel prefix computation on an array.",
    "description": "",
    "examples": [
      "const array = [1, 2, 3, 4, 5];\nparallelPrefix(array, (x, y) => x * y);"
    ],
    "output": ["array = [1, 2, 6, 24, 120]"]
  },
  {
    "name": "parallelSetAll",
    "syntax": "static void parallelSetAll(int[] array, IntUnaryOperator generator)",
    "keypoints": "Sets each element of an array using the provided generator function in parallel.",
    "description": "",
    "examples": [
      "const array = new int[5];\nparallelSetAll(array, i => i * 2);"
    ],
    "output": ["array = [0, 2, 4, 6, 8]"]
  },
  {
    "name": "parallelSort",
    "syntax": "static void parallelSort(int[] a)",
    "keypoints": "Sorts an array of integers in parallel.",
    "description": "",
    "examples": ["const array = [5, 2, 4, 1, 3];\nparallelSort(array);"],
    "output": ["array = [1, 2, 3, 4, 5]"]
  },
  {
    "name": "setAll",
    "syntax": "static void setAll(int[] array, IntUnaryOperator generator)",
    "keypoints": "Sets each element of an array using the provided generator function.",
    "description": "",
    "examples": ["const array = new int[5];\nsetAll(array, i => i * 2);"],
    "output": ["array = [0, 2, 4, 6, 8]"]
  },
  {
    "name": "sort",
    "syntax": "static void sort(int[] a)",
    "keypoints": "Sorts an array of integers in ascending order.",
    "description": "",
    "examples": ["const array = [5, 2, 4, 1, 3];\nsort(array);"],
    "output": ["array = [1, 2, 3, 4, 5]"]
  }
]
